/// <reference types="yandex-maps" />
import { PropType } from 'vue';
import { MarkerType, RecursiveArray } from './types';
declare const _default: import("vue").DefineComponent<{
    coordinates: {
        type: PropType<(number | RecursiveArray)[]>;
        required: true;
    };
    markerId: {
        type: (NumberConstructor | StringConstructor)[];
        required: true;
    };
    properties: {
        type: ObjectConstructor;
        default: () => {};
    };
    options: {
        type: PropType<ymaps.IGeoObjectOptions>;
        default: null;
    };
    type: {
        type: PropType<MarkerType>;
        default: string;
    };
    radius: {
        type: NumberConstructor;
        default: null;
    };
    events: {
        type: PropType<string[]>;
        default: () => string[];
        validator: (val: string[]) => boolean;
    };
}, (() => false | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>) | (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[] | undefined), unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    coordinates: {
        type: PropType<(number | RecursiveArray)[]>;
        required: true;
    };
    markerId: {
        type: (NumberConstructor | StringConstructor)[];
        required: true;
    };
    properties: {
        type: ObjectConstructor;
        default: () => {};
    };
    options: {
        type: PropType<ymaps.IGeoObjectOptions>;
        default: null;
    };
    type: {
        type: PropType<MarkerType>;
        default: string;
    };
    radius: {
        type: NumberConstructor;
        default: null;
    };
    events: {
        type: PropType<string[]>;
        default: () => string[];
        validator: (val: string[]) => boolean;
    };
}>> & {
    [x: `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    options: ymaps.IGeoObjectOptions;
    type: MarkerType;
    events: string[];
    properties: Record<string, any>;
    radius: number;
}>;
export default _default;
